
server.port=8082
job-service.url=http://job:8082
company-service.url=http://company:8081
review-service.url=http://review:8080


spring.datasource.url=jdbc:postgresql://postgres:5432/jobMS
spring.datasource.username=jiya
spring.datasource.password=jiya
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true 
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect



#eureka
eureka.client.serviceUrl.defaultZone=http://servicereg:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
spring.application.name=job-MS
eureka.instance.hostname=localhost

#to trace each and every request 
#by default localhost url for zipkin in dev
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
management.tracing.sampling.probability=1.0

# #config server
# spring.config.import=optional:configserver:http://config-server-ms:8085



# Actuator Configuration
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

#enable health check for circuit breaker
management.health.circuitbreakers.enabled=true



# Resilience4J Configuration
# we are creating a circuit breaker instance by name companyBreaker
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true

#to compute the failure rate
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

#time to wait before making the next attempt
#retry
resilience4j.circuitbreaker.instances.companyBreaker.max-attempts=5
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration=2s


#for rate limiting

#defualt wait time a thread will wait for permission to run when the rate is reached

#if more calls immeditaely rejected
resilience4j.ratelimiter.instances.companyBreaker.timeout-duration=0

#only 2 calls for 4 seconds
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period=10
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period=1
